#
# baseboxd.conf
#

baseboxd: {

	# common daemon parameters
	#
	daemon: {
		# daemonize
		#
		daemonize = false;

		# pid-file
		#
		pidfile = "/var/run/baseboxd.pid";
		
		# log-file
		#
		logfile = "/var/log/baseboxd.log";
		
		# debug level
		#
		logging: {
			rofl: {
				debug = 0;
			};
			core: {
				debug = 0;
			};
		};
	};

	# usecase specific configuration
	#
	usecase: {
		# business logic to be loaded into baseboxd
		#
		script = "/usr/local/sbin/baseboxd.py";
	};

	# OpenFlow endpoint configuration
	#
	openflow: {
	
		# set OpenFlow version
		#
		version = 4;

		# binding address
		#
		bindaddr = "::";
		
		# listening port
		#
		bindport = 6653;
	};

	# configuration for roflibs libraries
	# 
	roflibs:{

		# flowcore related configuration
		#
		flowcore:{

			# enable flowcore library, prerequisite for enabling higher layer libraries
			enable = true;
		};
		
		# ethcore related configuration
		#
		# This section contains configuration parameters for ethcore
		# and defines virtual LANs emulated on the datapath element.
		# baseboxd is capable of handling an arbitrary number of datapath
		# elements in principle, only limited by available processing 
		# and memory resources.
		ethcore:{
		
			# enable ethcore library, prerequisite for enabling higher layer libraries
			enable = true;

			# This is a list of group entries for datapath specific 
			# configuration options. 
			#
			datapaths = ( {
			
				# [dpid] (mandatory)
				#
				# defines the OpenFlow datapath identifier as decimal number
				#
				dpid = 256;
	
				# [default_pvid] (optional)
				#
				# The default VLAN identifier assigned to untagged frames
				# received on a port without any explicit definition (see below)
				# This creates a new logical VLAN on the datapath element with
				# the specified VID.
				#
				default_pvid = 1;	
				
				# [ports] (optional)
				#
				# A list of group entries defining port memberships for individual
				# ports. Each entry refers to a physical or logical port attached
				# to the OpenFlow datapath. A port entry contains the following 
				# entries:
				#
				#   [portno] (mandatory)
				#   The OpenFlow port number assigned by the datapath element to 
				#   a specific port.
				#
				#   [pvid] (optional)
				#   The port VID assigned to this port. This VID is assigned to all
				#   untagged frames received on the specific port.
				#
				#   [vlans] (optional)
				#   A list of tagged port memberships for the specified port. Frames
				#   received with a VID not specified in list vlans will be silently dropped.
				#
				ports = ( { portno=1; pvid=16; vlans=(10, 20, 128); },
				          { portno=2; pvid=32; vlans=(10, 128); },
				          { portno=3; pvid=48; vlans=(128); },
					  { portno=4; pvid=64; } );
	
				# [ethernet] (optional)
				#
				# Predefined endpoints for layer (n+1) Ethernet communication.
				# A list of group entries defining Ethernet endpoints for higher layer
				# communication (e.g. IPv4/v6). Each Ethernet endpoint is attached to 
				# a certain VID:mac-address combination. baseboxd creates tap-devices
				# for each endpoint defined, so make sure to choose unique devnames.
				#
				#   [devname] (mandatory)
				#   Name assigned to the new Ethernet endpoint and port created in Linux.
				#
				#   [vid] (optional)
				#   The VLAN identifier assigned to this endpoint, i.e. packets sent
				#   via this interface will enter the specified VLAN. If no vid parameter
				#   is specified, the default port VID defined for this datapath element
				#   will be used.
				#
				#   [hwaddr] (mandatory)
				#   MAC address assigned to this Ethernet endpoint. Arbitrary values 
				#   may be chosen for the link layer address, but should fulfill
				#   constraints and regulations defined by IANA/IEEE/EUI48 ;)
				#
				ethernet = ( { devname="ep1"; vid=16; hwaddr="00:11:11:11:11:11"; },
				   	     { devname="ep2"; vid=32; hwaddr="00:22:22:22:22:22"; },
					     { devname="ep3"; vid=48; hwaddr="00:33:33:33:33:33"; } );
			} );
		};

		# ipcore related configuration
		#
		# There are no ipcore specific configuration parameters defined 
		# currently. However, when creating Ethernet endpoints you may use 
		# your Linux distribution specific tools for assigning IP addresses
		# and routes. baseboxd will listen to the netlink interface and map
		# addresses and routes to appropriate OpenFlow flow table entries
		# on the OpenFlow datapath element.
		#
		# User plane traffic will be directly switched in the datapath 
		# element, while control plane traffic (e.g., ARP/ICMP, etc.) will 
		# be escalated to the Linux kernel for further handling.
		#
		ipcore:{

			# enable ipcore library, prerequisite for enabling higher layer libraries
			enable = true;
		};
		
		# grecore related configuration
		#
		grecore:{

			# enable grecore library
			enable = true;
		};
		
		# gtpcore related configuration
		#
		gtpcore:{

			# enable gtpcore library
			enable = true;



			# This is a list of group entries for datapath specific 
			# configuration options. 
			#
			datapaths = ( {
			
				# [dpid] (mandatory)
				#
				# defines the OpenFlow datapath identifier as decimal number
				#
				dpid = 256;
	
				# [relays] (optional)
				#
				# A list of GTP relay entries each defining a GTP relay capable of forwarding
				# GTP encapsulated packets and rewriting their headers during traversal.
				# Each GTP relay entry is unidirectional in nature, i.e. you have to 
				# specify at least two relay definitions to get a bidirectional
				# communication path. DO NOT USE THE SAME relay_id FOR BOTH DIRECTIONS!
				# Each entry consists of a relay identifier and two GTP labels for 
				# incoming and outgoing packets:
				#
				#   [relay_id] (mandatory)
				#   Unique identifier for this GTP relay entry. 
				#
				#   [gtp] (mandatory)
				#   GTP incoming and outgoing label
				#
				#     [incoming] (mandatory)
				#     Defines the incoming GTP label:
				#
				#       [version] (mandatory)
				#       IP version (4,6,...)
				#
				#       [saddr] (mandatory)
				#       Label source IP address
				#
				#       [sport] (optional)
				#       Label source UDP port (default: 2152)
				#
				#       [daddr] (mandatory)
				#       Label destination IP address
				#
				#       [dport] (optional)
				#       Label destination UDP port (default: 2152)
				#
				#       [teid] (mandatory)
				#       Label tunnel endpoint identifier
				#   
				#     [outgoing] (mandatory)
				#     Defines the outgoing GTP label:
				#
				#       [version] (mandatory)
				#       IP version (4,6,...)
				#
				#       [saddr] (mandatory)
				#       Label source IP address
				#
				#       [sport] (optional)
				#       Label source UDP port (default: 2152)
				# 
				#       [daddr] (mandatory)
				#       Label destination IP address
				#
				#       [dport] (optional)
				#       Label destination UDP port (default: 2152)
				#
				#       [teid] (mandatory)
				#       Label tunnel endpoint identifier
				#
				relays = ( { 
					relay_id = 0; 
					gtp:{
						incoming:{ 
							version = 4;
							saddr = "10.1.1.10"; 
						   	sport = 2152; 
						   	daddr = "10.1.1.1"; 
						   	dport = 2152; 
						   	teid  = 111111; 
						}; 
						outgoing:{ 
							version = 4;
							saddr = "10.2.2.2"; 
						   	sport = 2152; 
						   	daddr = "10.2.2.20"; 
						   	dport = 2152; 
						   	teid  = 222222; 
						}; 
					}; 
			   	},{ 
					relay_id = 1; 
					gtp:{
						incoming:{ 
							version = 4;
							saddr = "10.2.2.20"; 
						   	sport = 2152; 
						   	daddr = "10.2.2.2"; 
						   	dport = 2152; 
						   	teid  = 222222; 
						};
						outgoing:{ 
							version = 4;
							saddr = "10.1.1.1"; 
						   	sport = 2152; 
						   	daddr = "10.1.1.10"; 
						   	dport = 2152; 
						   	teid  = 111111; 
						}; 
					}; 
			   	} );

				# [terms] (optional)
				#
				# A list of GTP termination point entries capable of terminating
				# a GTP tunnel and forwarding IP traffic for both ingress (into tunnel)
				# and egress (out of tunnel) direction, i.e. a termination point
				# is bidirectional in nature. A termination point contains 
				# a GTP ingress label, a GTP egress label and a filter. All packets
				# matching the filter rules are sent via the tunnel towards the
				# tunnel endpoint.
				#
				#   [term_id] (mandatory)
				#   Unique identifier for this GTP termination point entry. 
				#
				#   [gtp] (mandatory)
				#   GTP ingress and egress label
				#
				#     [ingress] (mandatory)
				#     Defines the ingress GTP label:
				#
				#       [version] (mandatory)
				#       IP version (4,6,...)
				#
				#       [saddr] (mandatory)
				#       Label source IP address
				#
				#       [sport] (optional)
				#       Label source UDP port (default: 2152)
				#
				#       [daddr] (mandatory)
				#       Label destination IP address
				#
				#       [dport] (optional)
				#       Label destination UDP port (default: 2152)
				#
				#       [teid] (mandatory)
				#       Label tunnel endpoint identifier
				#   
				#     [egress] (mandatory)
				#     Defines the egress GTP label:
				#
				#       [version] (mandatory)
				#       IP version (4,6,...)
				#
				#       [saddr] (mandatory)
				#       Label source IP address
				#
				#       [sport] (optional)
				#       Label source UDP port (default: 2152)
				# 
				#       [daddr] (mandatory)
				#       Label destination IP address
				#
				#       [dport] (optional)
				#       Label destination UDP port (default: 2152)
				#
				#       [teid] (mandatory)
				#       Label tunnel endpoint identifier
				#   
				#   [inject] (mandatory)
				#   Defines a matching filter for assigning incoming IP datagrams to 
				#   this specific GTP termination point, i.e. these packets enter the
				#   GTP tunnel.
				#
				#     [version] (mandatory)
				#     IP version (4,6,...)
				#
				#     [daddr] (mandatory)
				#     Defines the IP destination address
				#
				#     [dmask] (optional)
				#     Defines the IP destination mask (default: 255.255.255.255)
				#
				#     [saddr] (optional)
				#     Defines the IP source address (default: 0.0.0.0)
				#
				#     [smask] (optional)
				#     Defines the IP source mask (default: 0.0.0.0)
				#
				terms = ( { 
						term_id = 0; 
						gtp:{
							ingress:{  
								version = 4;
								saddr = "10.1.1.10"; 
								sport = 2152; 
								daddr = "10.1.1.1"; 
								dport = 2152; 
								teid  = 111111; 
							};
							egress:{   
								version = 4;
								saddr = "10.2.2.2"; 
								sport = 2152; 
								daddr = "10.2.2.20"; 
							   	dport = 2152; 
							   	teid  = 222222; 
							}; 
						};
						inject:{   
							version = 4;
							daddr = "192.168.2.20";   
							dmask = "255.255.255.255"; 
							saddr = "0.0.0.0";
							smask = "0.0.0.0"; 
						};
				} );
			} );
		};
	};
};
